请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。
 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，
但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。






public class Solution {  
    boolean  havePath=false;
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str){
        boolean[][] visited=new boolean[rows+1][cols+1];
        if(str.length ==0)return true;
        char[][] matrix2 =new char[rows+1][cols+1];
        int id=0;
        for(int i=0;i<rows;++i){
            for(int j=0;j<cols;++j) {
                matrix2[i][j]=matrix[id++];
            }
        }
        for(int i=0;i<rows;++i){
            for(int j=0;j<cols;++j){
                if(havePath)return true;
                visited[i][j]=true;
                searchPath(matrix2,rows,cols,str,i,j,0,visited);
                visited[i][j]=false;
            }
        }
        return havePath;
    }
    private void searchPath(char[][] matrix, int rows,int cols ,char[] str,
                            int nowrows,int nowcols,int index,boolean[][] visited){
        if(index==str.length || havePath==true){
            havePath=true;
            return ;
        }
        if(matrix[nowrows][nowcols]==str[index]){
            if(nowrows>0 &&visited[nowrows-1][nowcols]==false){
                visited[nowrows-1][nowcols]=true;
                searchPath(matrix,rows,cols,str,nowrows-1,nowcols,index+1,visited);
                visited[nowrows-1][nowcols]=false;
            }
            if(nowrows<rows &&visited[nowrows+1][nowcols]==false){
                visited[nowrows+1][nowcols]=true;
                searchPath(matrix,rows,cols,str,nowrows+1,nowcols,index+1,visited);
                visited[nowrows+1][nowcols]=false;
            }
            if(nowcols>0 &&visited[nowrows][nowcols-1]==false){
                visited[nowrows][nowcols-1]=true;
                searchPath(matrix,rows,cols,str,nowrows,nowcols-1,index+1,visited);
                visited[nowrows][nowcols-1]=false;
            }
            if(nowcols<cols &&visited[nowrows][nowcols+1]==false){
                visited[nowrows][nowcols+1]=true;
                searchPath(matrix,rows,cols,str,nowrows,nowcols+1,index+1,visited);
                visited[nowrows][nowcols+1]=false;
            }
        }
        return ;
    }
}